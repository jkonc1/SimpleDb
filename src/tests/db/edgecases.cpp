// Generated by ChatGPT
#include "doctest.h"

#include "db/database.h"
#include "csv/csv.h"             // for direct CSV I/O test
#include <sstream>

static bool is_ok(const std::string &r)    { return r.rfind("OK ", 0) == 0; }
static bool is_error(const std::string &r) { return !is_ok(r); }
static void must_have(const std::string &out, const std::string &sub) {
    REQUIRE(out.find(sub) != std::string::npos);
}
static void must_not_have(const std::string &out, const std::string &sub) {
    REQUIRE(out.find(sub) == std::string::npos);
}

TEST_CASE("DDL and basic DML") {
    Database db;
    // CREATE / DROP
    CHECK(is_ok(db.process_query("CREATE TABLE T(a INT, b STRING, c FLOAT, d CHAR);")));
    CHECK(is_ok(db.process_query("DROP TABLE T;")));
    // DROP nonexistent
    CHECK(is_error(db.process_query("DROP TABLE T;")));

    // recreate
    CHECK(is_ok(db.process_query("CREATE TABLE T(a INT, b STRING);")));
    // INSERT simple
    CHECK(is_ok(db.process_query("INSERT INTO T VALUES (1,'foo');")));
    CHECK(is_ok(db.process_query("INSERT INTO T VALUES (2,'bar');")));
    // INSERT with explicit column list
    CHECK(is_ok(db.process_query("INSERT INTO T (b) VALUES ('baz');")));
}

TEST_CASE("DELETE semantics") {
    Database db;
    db.process_query("CREATE TABLE X(id INT);");
    db.process_query("INSERT INTO X VALUES (1);");
    db.process_query("INSERT INTO X VALUES (2);");
    // DELETE with WHERE
    CHECK(is_ok(db.process_query("DELETE FROM X WHERE id = 1;")));
    auto out1 = db.process_query("SELECT id FROM X;");
    must_have(out1, "2,");
    must_not_have(out1, "1,");
}

TEST_CASE("INSERT errors") {
    Database db;
    db.process_query("CREATE TABLE Y(a INT, b INT, c INT);");
    // wrong count
    CHECK(is_error(db.process_query("INSERT INTO Y VALUES (1,2);")));
    CHECK(is_error(db.process_query("INSERT INTO Y VALUES (1,2,3,4);")));
    // explicit list mismatch
    CHECK(is_error(db.process_query("INSERT INTO Y (a,b) VALUES (1);")));
}

TEST_CASE("Simple SELECT and projection") {
    Database db;
    db.process_query("CREATE TABLE M(x INT, y INT);");
    db.process_query("INSERT INTO M VALUES (2,3);");
    db.process_query("INSERT INTO M VALUES (5,4);");
    auto out = db.process_query("SELECT x, y, x+y, x*y, 'const', NULL FROM M;");
    CHECK(is_ok(out));
    must_have(out, "2,3,5,6,const,\\x,");
    must_have(out, "5,4,9,20,");
}

TEST_CASE("Complex WHERE: AND, OR, NOT, parentheses, BETWEEN, LIKE, IS NULL") {
    Database db;
    db.process_query("CREATE TABLE T(a INT, b STRING);");
    db.process_query("INSERT INTO T VALUES (3,'foo');");
    db.process_query("INSERT INTO T VALUES (7,'bar');");
    db.process_query("INSERT INTO T VALUES (5,'fizz');");
    // Combined condition:
    //   NOT (a < 5 OR b LIKE 'f%') AND a BETWEEN 4 AND 8
    auto out = db.process_query(
        "SELECT a FROM T WHERE NOT (a < 5 OR b LIKE 'f%') AND a BETWEEN 4 AND 8;"
    );
    CHECK(is_ok(out));
    must_have   (out, "7,");
    must_not_have(out, "3,");
    must_not_have(out, "5,");
    // IS NULL / IS NOT NULL
    db.process_query("INSERT INTO T (b) VALUES ('zzz');");  // new row with a=NULL,b='zzz'
    auto out2 = db.process_query("SELECT b FROM T WHERE a IS NULL;");
    CHECK(is_ok(out2));
    must_have(out2, "zzz,");
}

TEST_CASE("IN, NOT IN literal lists and subqueries") {
    Database db;
    db.process_query("CREATE TABLE A(v INT);");
    db.process_query("CREATE TABLE B(v INT);");
    for(int i : {1,2,3}) db.process_query(std::format("INSERT INTO A VALUES ({});", i));
    for(int i : {2,3,4}) db.process_query(std::format("INSERT INTO B VALUES ({});", i));

    // IN list
    auto o1 = db.process_query("SELECT v FROM A WHERE v IN (1,3,5);");
    CHECK(is_ok(o1));
    must_have(o1, "1,");
    must_have(o1, "3,");
    must_not_have(o1, "2,");
    // NOT IN list
    auto o2 = db.process_query("SELECT v FROM A WHERE v NOT IN (2,4);");
    CHECK(is_ok(o2));
    must_have(o2, "1,");
    must_have(o2, "3,");

    // IN subquery
    auto o3 = db.process_query(
      "SELECT v FROM A WHERE v IN (SELECT B.v FROM B WHERE B.v > 2);"
    );
    CHECK(is_ok(o3));
    must_have(o3, "3,");
    must_not_have(o3, "1,");

    // ANY / ALL
    auto o4 = db.process_query(
      "SELECT v FROM A WHERE v >= ANY (SELECT B.v FROM B);"
    );
    CHECK(is_ok(o4));
    must_have(o4, "2,");
    must_have(o4, "3,");
    must_not_have(o4, "1,");

    auto o5 = db.process_query(
      "SELECT v FROM A WHERE v < ALL (SELECT B.v FROM B);"
    );
    CHECK(is_ok(o5));
    must_have(o5, "1,");
    must_not_have(o5, "2,");
}

TEST_CASE("EXISTS correlated subquery") {
    Database db;
    db.process_query("CREATE TABLE U(k INT, v INT);");
    db.process_query("INSERT INTO U VALUES (1,10);");
    db.process_query("INSERT INTO U VALUES (2,20);");
    db.process_query("INSERT INTO U VALUES (3,15);");
    // include k where there is a row whose v/10 == k
    auto out = db.process_query(
      "SELECT k FROM U WHERE EXISTS ("
        "SELECT 1 FROM U X WHERE X.v/10 = U.k"
      ");"
    );
    CHECK(is_ok(out));
    must_have(out, "1,");
    must_have(out, "2,");
    must_not_have(out, "3,");
}

TEST_CASE("Multi-table join via WHERE") {
    Database db;
    db.process_query("CREATE TABLE A(id INT, v STRING);");
    db.process_query("CREATE TABLE B(id INT, name STRING);");
    db.process_query("INSERT INTO A VALUES (1,'x');");
    db.process_query("INSERT INTO A VALUES (2,'y');");
    db.process_query("INSERT INTO B VALUES (2,'bob');");
    db.process_query("INSERT INTO B VALUES (3,'carol');");

    auto out = db.process_query(
      "SELECT A.id, B.name FROM A, B WHERE A.id = B.id;"
    );
    CHECK(is_ok(out));
    //must_have   (out, "A.id,B.name,");
    must_have   (out, "2,bob,");
    must_not_have(out, "1,");
    must_not_have(out, "3,");
}

TEST_CASE("Three-way Cartesian product") {
    Database db;
    db.process_query("CREATE TABLE T1(a INT);");
    db.process_query("CREATE TABLE T2(b CHAR);");
    db.process_query("CREATE TABLE T3(c STRING);");
    db.process_query("INSERT INTO T1 VALUES (1);");
    db.process_query("INSERT INTO T1 VALUES (2);");
    db.process_query("INSERT INTO T2 VALUES ('x');");
    db.process_query("INSERT INTO T3 VALUES ('foo');");

    auto out = db.process_query("SELECT * FROM T1, T2, T3;");
    CHECK(is_ok(out));
    must_have(out, "T1.a,T2.b,T3.c,");
    must_have(out, "1,x,foo,");
    must_have(out, "2,x,foo,");
}

TEST_CASE("Aggregates, DISTINCT, GROUP BY and HAVING") {
    Database db;
    db.process_query("CREATE TABLE S(c STRING, v FLOAT);");
    db.process_query("INSERT INTO S VALUES ('a',1.0);");
    db.process_query("INSERT INTO S VALUES ('a',2.0);");
    db.process_query("INSERT INTO S VALUES ('b',1.0);");

    // simple aggregates
    auto r1 = db.process_query("SELECT COUNT(c), SUM(v), AVG(v), MIN(v), MAX(v) FROM S;");
    CHECK(is_ok(r1));
    must_have(r1, "3,");       // COUNT
    must_have(r1, "4,");       // SUM

    // DISTINCT
    auto r2 = db.process_query("SELECT COUNT(DISTINCT c), SUM(DISTINCT v) FROM S;");
    CHECK(is_ok(r2));
    must_have(r2, "2,");       // two distinct c's

    // GROUP BY + HAVING
    auto r3 = db.process_query(
      "SELECT c, SUM(v) FROM S GROUP BY c HAVING SUM(v) > 1.5;"
    );
    CHECK(is_ok(r3));
    must_have(r3, "a,3,");
    must_not_have(r3, "b,");
}

TEST_CASE("SELECT DISTINCT on computed expressions") {
    Database db;
    db.process_query("CREATE TABLE D(v INT);");
    for(int x : {1,2,1,2,3})
        db.process_query(std::format("INSERT INTO D VALUES ({});", x));

    auto out = db.process_query("SELECT DISTINCT v*2, v+1 FROM D;");
    CHECK(is_ok(out));
    // header contains both expressions
    //must_have(out, "v*2,v+1,");
    // possible rows: 2,2; 4,3; 6,4
    must_have(out, "2,2,");
    must_have(out, "4,3,");
    must_have(out, "6,4,");
}

TEST_CASE("Alias resolution and ambiguous columns") {
    Database db;
    db.process_query("CREATE TABLE T(a INT, b INT);");
    db.process_query("INSERT INTO T VALUES (1,10);");

    // ambiguous: two Ts in FROM
    auto e1 = db.process_query("SELECT a FROM T AS T, T AS U;");
    CHECK(is_error(e1));

    // qualified works
    auto e2 = db.process_query("SELECT U.b FROM T T, T U WHERE U.b = 10;");
    CHECK(is_ok(e2));
    must_have(e2, "10,");
}

TEST_CASE("LIKE with % and _ wildcards") {
    Database db;
    db.process_query("CREATE TABLE L(s STRING);");
    for(auto word : {"abc","axc","abbc"}) {
        db.process_query(std::format("INSERT INTO L VALUES ('{}');", word));
    }

    auto p1 = db.process_query("SELECT s FROM L WHERE s LIKE 'a_c';");
    CHECK(is_ok(p1));
    must_have   (p1, "abc,");
    must_have   (p1, "axc,");
    must_not_have(p1, "abbc,");

    auto p2 = db.process_query("SELECT s FROM L WHERE s LIKE 'a%c';");
    CHECK(is_ok(p2));
    must_have(p2, "abc,");
    must_have(p2, "axc,");
    must_have(p2, "abbc,");
}

TEST_CASE("CSV I/O round-trip and escapes") {
    std::string raw = R"(a\\,b,\,,\x,END,)";
    std::istringstream in(raw + "\n");
    auto table = read_csv(in);
    // one row, 5 columns
    REQUIRE(table.size() == 1);
    REQUIRE(table[0].size() == 5);
    CHECK(table[0][0].value() == R"(a\)");  // backslash-backslash
    CHECK(table[0][1].value() == "b");
    CHECK(table[0][2].value() == ",");      // escaped comma
    CHECK(!table[0][3].has_value());        // \x â†’ NULL
    CHECK(table[0][4].value() == "END");
}
