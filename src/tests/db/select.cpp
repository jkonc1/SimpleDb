// Generated by ChatGPT
#include "doctest.h"
#include "db/database.h"  

static void must_have(const std::string &out, const std::string &sub) {
    REQUIRE(out.find(sub) != std::string::npos);
}

static void must_not_have(const std::string &out, const std::string &sub) {
    REQUIRE(out.find(sub) == std::string::npos);
}

TEST_CASE("SELECT * with various data including NULLs") {
    Database db;
    db.process_query("CREATE TABLE t (id int, name string, score float);");
    db.process_query("INSERT INTO t VALUES (1, 'alice', 9.5);");
    db.process_query("INSERT INTO t VALUES (2, 'bob', 8.0);");
    db.process_query("INSERT INTO t () VALUES ();");

    auto out = db.process_query("SELECT * FROM t;");
    must_have(out, "t.id,t.name,t.score,");
    must_have(out, "1,alice,9.5,");
    must_have(out, "2,bob,8,");
    must_have(out, "\\x,\\x,\\x,");
}

TEST_CASE("WHERE clauses: comparisons, BETWEEN, LIKE, NULL tests, logical ops") {
    Database db;
    db.process_query("CREATE TABLE x (a int, b string);");
    db.process_query("INSERT INTO x VALUES (5, 'foo');");
    db.process_query("INSERT INTO x VALUES (10, 'bar');");
    db.process_query("INSERT INTO x () VALUES ();");

    // simple comparison
    must_have(db.process_query("SELECT a FROM x WHERE a > 6;"), "10,");
    must_not_have(db.process_query("SELECT a FROM x WHERE a > 6;"), "5,");

    // BETWEEN / NOT BETWEEN
    must_have(db.process_query("SELECT a FROM x WHERE a BETWEEN 1 AND 6;"), "5,");
    must_have(db.process_query("SELECT a FROM x WHERE a NOT BETWEEN 1 AND 6;"), "10,");

    // LIKE / NOT LIKE
    must_have(db.process_query("SELECT b FROM x WHERE b LIKE 'f%';"), "foo,");
    must_have(db.process_query("SELECT b FROM x WHERE b NOT LIKE 'f%';"), "bar,");

    // IS NULL / IS NOT NULL
    must_have(db.process_query("SELECT a FROM x WHERE a IS NULL;"), "\\x,");
    must_have(db.process_query("SELECT b FROM x WHERE b IS NOT NULL;"), "foo,");

    // logical AND / OR / NOT
    must_have(db.process_query("SELECT a FROM x WHERE a = 5 AND b = 'foo';"), "5,");
    must_have(db.process_query("SELECT a FROM x WHERE a = 5 OR a = 10;"), "5,");
    must_have(db.process_query("SELECT a FROM x WHERE NOT a = 5;") , "10,");
}

TEST_CASE("IN, NOT IN, subquery, EXISTS, ANY, ALL") {
    Database db;
    db.process_query("CREATE TABLE a (v int);");
    db.process_query("CREATE TABLE b (v int);");
    db.process_query("INSERT INTO a VALUES (1);");
    db.process_query("INSERT INTO a VALUES (2);");
    db.process_query("INSERT INTO b VALUES (2);");
    db.process_query("INSERT INTO b VALUES (3);");

    // IN list and NOT IN list
    must_have(db.process_query("SELECT v FROM a WHERE v IN (1,3);"), "1,");
    must_have(db.process_query("SELECT v FROM a WHERE v NOT IN (2);"), "1,");

    // IN / EXISTS subquery
    must_have(db.process_query("SELECT v FROM a WHERE v IN (SELECT inner.v FROM b inner);"), "2,");
    must_have(db.process_query("SELECT v FROM a WHERE EXISTS (SELECT 1 FROM b WHERE b.v = a.v);") , "2,");
    
    // ANY / ALL
    must_have(db.process_query("SELECT v FROM a WHERE v >= ANY (SELECT inner.v FROM b inner);") , "2,");
    must_have(db.process_query("SELECT v FROM a WHERE v < ALL (SELECT inner.v FROM b inner);") , "1,");
}

TEST_CASE("Aggregates, GROUP BY, HAVING, DISTINCT") {
    Database db;
    db.process_query("CREATE TABLE s (c string, v float);");
    db.process_query("INSERT INTO s VALUES ('a', 1.0);");
    db.process_query("INSERT INTO s VALUES ('a', 2.0);");
    db.process_query("INSERT INTO s VALUES ('b', 1.0);");

    // aggregates
    must_have(db.process_query("SELECT COUNT(c), SUM(v), AVG(v), MAX(v), MIN(v) FROM s;"), "3,");

    // DISTINCT
    must_have(db.process_query("SELECT COUNT(DISTINCT c), SUM(DISTINCT v) FROM s;"), "2,");

    // GROUP BY & HAVING
    auto o = db.process_query("SELECT c, SUM(v) FROM s GROUP BY c HAVING SUM(v) > 1;");
    must_have(o, "a,3,");
}

TEST_CASE("Arithmetic expressions in SELECT and WHERE") {
    Database db;
    db.process_query("CREATE TABLE m (x int, y int);");
    db.process_query("INSERT INTO m VALUES (2, 3);");
    db.process_query("INSERT INTO m VALUES (5, 4);");

    auto o1 = db.process_query("SELECT x+y, x*y, x-y, x/y FROM m;");
    must_have(o1, "5,6,-1,0");
    must_have(o1, "9,20,1,1");

    auto o2 = db.process_query("SELECT x FROM m WHERE x+y = 9;");
    must_have(o2, "5,");
    must_not_have(o2, "2,");
}

TEST_CASE("SELECT DISTINCT and multi-table cartesian join") {
    Database db;
    db.process_query("CREATE TABLE t1 (a int);");
    db.process_query("CREATE TABLE t2 (b int);");
    db.process_query("INSERT INTO t1 VALUES (1);");
    db.process_query("INSERT INTO t2 VALUES (2);");

    auto o = db.process_query("SELECT DISTINCT a, b FROM t1, t2;");
    must_have(o, "1,2,");
}

