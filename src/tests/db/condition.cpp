// Generated by ChatGPT
#include "doctest.h"
#include "db/database.h"

static bool is_ok(const std::string &r)    { return r.rfind("OK ", 0) == 0; }
static bool is_error(const std::string &r) { return !is_ok(r); }

TEST_CASE("DELETE with WHERE only removes matching rows") {
    Database db;
    CHECK(is_ok(db.process_query("CREATE TABLE u(id INT);")));
    CHECK(is_ok(db.process_query("INSERT INTO u VALUES (10);")));
    CHECK(is_ok(db.process_query("INSERT INTO u VALUES (20);")));

    // Remove id = 10
    CHECK(is_ok(db.process_query("DELETE FROM u WHERE id = 10;")));

    // Now only 20 should remain
    auto out = db.process_query("SELECT id FROM u;");
    CHECK(out.find("20,") != std::string::npos);
    CHECK(out.find("10,") == std::string::npos);
}

TEST_CASE("DELETE errors on unknown table or bad syntax") {
    Database db;
    // Unknown table
    auto r1 = db.process_query("DELETE FROM missing;");
    CHECK(is_error(r1));

    // Missing semicolon
    CHECK(is_error(db.process_query("CREATE TABLE T(x INT)")));
    auto r2 = db.process_query("DELETE FROM T");  
    CHECK(is_error(r2));
}

TEST_CASE("INSERT with mismatched column count") {
    Database db;
    CHECK(is_ok(db.process_query("CREATE TABLE v(a INT, b INT, c INT);")));

    // Too many values
    CHECK(is_error(db.process_query("INSERT INTO v VALUES (1,2,3,4);")));
    // Too few values
    CHECK(is_error(db.process_query("INSERT INTO v VALUES (1,2);")));
    // Explicit list but fewer values
    CHECK(is_error(db.process_query("INSERT INTO v (a,b) VALUES (1);")));
}

TEST_CASE("COUNT, SUM, AVG, MAX, MIN on an empty table") {
    Database db;
    CHECK(is_ok(db.process_query("CREATE TABLE e(f FLOAT);")));

    // COUNT(*) → 0
    auto c0 = db.process_query("SELECT COUNT(*) FROM e;");
    CHECK(is_ok(c0));
    CHECK(c0.find("0,") != std::string::npos);

    // COUNT(f) → 0
    auto c1 = db.process_query("SELECT COUNT(f) FROM e;");
    CHECK(is_ok(c1));
    CHECK(c1.find("0,") != std::string::npos);

    // SUM(f) → NULL
    auto s = db.process_query("SELECT SUM(f) FROM e;");
    CHECK(is_ok(s));
    CHECK(s.find("\\x,") != std::string::npos);

    // AVG(f) → NULL
    auto a = db.process_query("SELECT AVG(f) FROM e;");
    CHECK(is_ok(a));
    CHECK(a.find("\\x,") != std::string::npos);

    // MAX(f) → NULL, MIN(f) → NULL
    auto m1 = db.process_query("SELECT MAX(f),MIN(f) FROM e;");
    CHECK(is_ok(m1));
    CHECK(m1.find("\\x,\\x,") != std::string::npos);
}

TEST_CASE("IN and NOT IN with empty lists") {
    Database db;
    CHECK(is_ok(db.process_query("CREATE TABLE w(v INT);")));
    CHECK(is_ok(db.process_query("INSERT INTO w VALUES (1);")));
    CHECK(is_ok(db.process_query("INSERT INTO w VALUES (2);")));

    // IN empty list → no rows
    auto out1 = db.process_query("SELECT v FROM w WHERE v IN ();");
    // Should not show any value
    CHECK(out1.find("1,") == std::string::npos);
    CHECK(out1.find("2,") == std::string::npos);

    // NOT IN empty → all rows
    auto out2 = db.process_query("SELECT v FROM w WHERE v NOT IN ();");
    CHECK(out2.find("1,") != std::string::npos);
    CHECK(out2.find("2,") != std::string::npos);
}

TEST_CASE("GROUP BY without HAVING deduplicates keys") {
    Database db;
    CHECK(is_ok(db.process_query("CREATE TABLE g(c STRING, x INT);")));
    CHECK(is_ok(db.process_query("INSERT INTO g VALUES ('a',1);")));
    CHECK(is_ok(db.process_query("INSERT INTO g VALUES ('a',2);")));
    CHECK(is_ok(db.process_query("INSERT INTO g VALUES ('b',3);")));

    // Group by only c, project just c
    auto out = db.process_query("SELECT c FROM g GROUP BY c;");
    // Should see 'a,' and 'b,' exactly once each
    REQUIRE(out.find("a,") != std::string::npos);
    REQUIRE(out.find("b,") != std::string::npos);

    // No duplicates
    size_t pos = out.find("a,");
    size_t pos2 = out.find("a,", pos+1);
    CHECK(pos2 == std::string::npos);
}

TEST_CASE("Ambiguous column in multi-table SELECT triggers error") {
    Database db;
    CHECK(is_ok(db.process_query("CREATE TABLE t1(a INT);")));
    CHECK(is_ok(db.process_query("CREATE TABLE t2(a INT);")));
    CHECK(is_ok(db.process_query("INSERT INTO t1 VALUES (1);")));
    CHECK(is_ok(db.process_query("INSERT INTO t2 VALUES (2);")));

    // Without alias qualification, 'a' is ambiguous
    auto err = db.process_query("SELECT a FROM t1, t2;");
    CHECK(is_error(err));
}

TEST_CASE("SELECT literal expressions and NULL") {
    Database db;
    CHECK(is_ok(db.process_query("CREATE TABLE dummy(x INT);")));
    CHECK(is_ok(db.process_query("INSERT INTO dummy VALUES (10);")));

    // Arithmetic and constants
    auto o = db.process_query("SELECT 2+3, 5*6, 'foo', NULL FROM dummy;");
    CHECK(is_ok(o));
    // Should see 5,30,foo,\x
    CHECK(o.find("5,30,foo,\\x,") != std::string::npos);
}

TEST_CASE("SELECT without FROM is invalid") {
    Database db;
    auto r = db.process_query("SELECT 1+1;");
    CHECK(is_error(r));
}